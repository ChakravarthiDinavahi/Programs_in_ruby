class Node
  attr_accessor :value
  attr_accessor :left
  attr_accessor :right

  def initialize(value)
    @value = value
    @left = nil
    @right = nil
  end
end

class BinarySearchTree
  def initialize
    @root = nil
    constuct
    traversals
  end

  def constuct
    puts 'tree with 5 nodes construction started'
    @root = Node.new(1)
    @root.left = Node.new(2)
    @root.right = Node.new(3)
    @root.left.left = Node.new(4)
    @root.left.right = Node.new 5
    @root.right.left = Node.new 6
    @root.right.right = Node.new 7
    puts 'tree with 5 nodes construction done'
  end

  def traversals
    # preorder(@root)
    # puts "Preorder traversal of trees is #{preorder.flatten}"
    # inorder(@root)
    # puts "Inorder traversal of trees is #{inorder.flatten.join(",")}"
    # postorder = postorder(@root)
    # postorder_2_stacks(@root)

    level_order(@root)
  end

  def preorder(node)
    # Root, Left and Right
    s = []
    s << node
    while s.length !=0
      curr = s.pop
      print curr.value.to_s + ' '
      s << curr.right  if curr.right
      s << curr.left if curr.left
    end
  end

  def postorder_2_stacks(node)
    # Left and Right, root
    s1,s2 = [],[]
    s1 << node
    while s1.length >0
      curr = s1.pop
      s2<<  curr
      s1 << curr.left if curr.left
      s1 << curr.right  if curr.right
    end
    while s2.length != 0
      print s2.pop.value.to_s+" "
    end
  end

  def level_order(node)
    q1 = []
    q1 << node
    while q1.length > 0
      curr = q1.shift
      print curr.value.to_s + ' '
      q1 << curr.left if curr.left
      q1 << curr.right if curr.right
    end
  end

  def inorder(node)
    # learnt version
    # Left, root and Right
    s = []
    current_node = node
    while !current_node.nil? || s.present?
      until current_node.nil?
        s << current_node
        current_node = current_node.left
      end
      curr = s.pop
      print curr.value.to_s + ' '
      current_node = curr.right
    end
  end
end

BinarySearchTree.new
